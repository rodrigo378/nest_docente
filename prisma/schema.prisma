// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  nombre       String?
  apellido     String?
  genero       String?
  grado        String?
  estado       String       @default("A") @db.Char(1)
  email        String       @unique
  password     String? // Solo si usa login propio
  googleId     String?      @unique // ID de Google
  microsoftId  String?      @unique // ID de Microsoft
  authProvider AuthProvider @default(LOCAL)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  // Docente    Docente?
  Permission Permission[]
  Log        Log[]

  @@map("user")
}

enum AuthProvider {
  LOCAL // Login propio (email y password)
  GOOGLE // Login con Google
  MICROSOFT // Login con Microsoft
}

model Departamento {
  id         Int         @id @default(autoincrement())
  nombre     String
  provincias Provincia[]

  @@map("departamento")
}

model Provincia {
  id              Int          @id @default(autoincrement())
  nombre          String
  departamento    Departamento @relation(fields: [departamento_id], references: [id], onDelete: Cascade)
  departamento_id Int
  distritos       Distrito[]

  @@map("provincia")
}

model Distrito {
  id           Int       @id @default(autoincrement())
  nombre       String
  provincia    Provincia @relation(fields: [provincia_id], references: [id], onDelete: Cascade)
  provincia_id Int

  @@map("distrito")
}

model Modulo {
  id        Int       @id @default(autoincrement())
  nombre    String    @db.VarChar(255)
  codigo    String    @unique @db.VarChar(255)
  icono     String?   @db.Text
  estado    String    @default("A") @db.Char(1)
  createdAt DateTime? @db.Timestamp
  updatedAt DateTime? @updatedAt @db.Timestamp
  Item      Item[]

  @@map("modulo")
}

model Item {
  id        Int       @id @default(autoincrement())
  moduloId  Int       @map("modulo_id")
  nombre    String    @db.VarChar(255)
  codigo    String    @unique @db.VarChar(255)
  createdAt DateTime? @db.Timestamp
  updatedAt DateTime? @updatedAt @db.Timestamp

  // Relación con el modelo Modulo
  modulo     Modulo       @relation(fields: [moduloId], references: [id])
  Permission Permission[]

  @@map("item")
}

model Permission {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  itemId    Int       @map("item_id")
  estado    String    @default("A") @db.Char(1)
  createdAt DateTime? @db.Timestamp
  updatedAt DateTime? @updatedAt @db.Timestamp

  // Relación con User
  user User @relation(fields: [userId], references: [id])

  // Relación con Item
  item Item @relation(fields: [itemId], references: [id])

  @@map("permission")
}

model Periodo {
  n_codper Int      @id
  f_cierre DateTime
  turnos   Turno[] // Relación 1 a muchos: Un periodo tiene varios turnos

  @@map("periodo")
}

model Turno {
  id          Int     @id @default(autoincrement())
  n_codper    Int
  n_codpla    Int
  c_codfac    String
  nom_fac     String
  c_codesp    String
  nomesp      String
  c_grpcur    String
  c_codmod    Int
  c_nommod    String
  n_ciclo     Int
  estado      Int     @default(0)
  subido_sigu Boolean @default(false)

  Horario Horario[]
  Curso   Curso[]
  periodo Periodo   @relation(fields: [n_codper], references: [n_codper])

  @@unique([n_codper, n_codpla, c_codfac, c_codesp, c_grpcur, c_codmod, n_ciclo])
  @@map("turno")
}

model tb_plan_estudio_curso {
  id       Int    @id @default(autoincrement())
  n_codper Int
  c_codmod Int
  c_codfac String @db.Char(1)
  c_codesp String @db.Char(2)
  c_codcur String
  c_nomcur String
  n_ciclo  Int
  n_ht     Int
  n_hp     Int
  c_area   String
  c_curup  Int

  cursos Curso[] @relation("curso_id") // <- Campo inverso agregado
}

model Curso {
  id Int @id @default(autoincrement())

  curso_id Int
  curso    tb_plan_estudio_curso @relation("curso_id", fields: [curso_id], references: [id], onDelete: Cascade)

  c_alu Int?

  turno_id Int
  turno    Turno @relation(fields: [turno_id], references: [id], onDelete: Cascade)

  cursosHijos  grupo_sincro[] @relation("CursoPadre")
  cursosPadres grupo_sincro[] @relation("CursoHijo")

  Horario Horario[]

  @@map("curso")
}

model grupo_sincro {
  id Int @id @default(autoincrement())

  curso_id   Int
  cursosHijo Curso @relation("CursoHijo", fields: [curso_id], references: [id], onDelete: Cascade)

  padre_curso_id Int
  cursoPadre     Curso @relation("CursoPadre", fields: [padre_curso_id], references: [id], onDelete: Cascade)

  tipo Int // 0 => transversal, 1=> agrupado

  shortname String
}

model Horario {
  id        Int       @id @default(autoincrement())
  dia       String?
  h_inicio  DateTime?
  h_fin     DateTime?
  n_horas   Float
  c_color   String?
  tipo      String //teorico practico
  // c_codmod Int 
  h_umaPlus Float?
  modalidad String // pre vir

  aula_id Int?
  aula    Aula? @relation(fields: [aula_id], references: [id], onDelete: Cascade)

  Docente    Docente? @relation(fields: [docente_id], references: [id])
  docente_id Int?

  curso_id Int
  curso    Curso @relation(fields: [curso_id], references: [id], onDelete: Cascade)

  Turno    Turno @relation(fields: [turno_id], references: [id])
  turno_id Int

  @@map("horario")
}

model Aula {
  id          Int          @id @default(autoincrement())
  c_codaula   String
  n_piso      Int
  pabellon    String
  n_capacidad String
  c_obs       String?      @db.Text
  ip          String?
  Horario     Horario[]
  asistencia  Asistencia[]

  id_aula_sigu String?

  @@map("aula")
}

model funcion_docente {
  id          Int       @id @default(autoincrement())
  descripcion String?
  Docentes    Docente[] // Relación inversa
}

model Docente {
  id          Int    @id @default(autoincrement())
  c_dnidoc    String @unique @db.Char(8)
  c_codfac    String
  nom_fac     String
  c_nomdoc    String
  h_min       Int
  h_max       Int
  tipo        Int // 0 => tc , 1 => tp 
  h_total     Float  @default(0)
  h_rectorado Int
  v1          Int    @default(0)
  v2          Int    @default(0)
  id_funcion  Int?

  funcion_docente funcion_docente? @relation(fields: [id_funcion], references: [id])
  Horario         Horario[]
  asistencia      Asistencia[]

  @@map("docente")
}

model Log {
  id          Int      @id @default(autoincrement())
  userId      Int?     @map("user_id")
  user        User?    @relation(fields: [userId], references: [id])
  entidad     String   @db.VarChar(100)
  accion      String   @db.VarChar(50)
  descripcion String?  @db.Text
  before      Json?
  after       Json?
  ip          String?  @db.VarChar(45)
  createdAt   DateTime @default(now())

  @@map("log")
}

model Asistencia {
  id Int @id @default(autoincrement())

  docenteId Int     @map("docente_id")
  docente   Docente @relation(fields: [docenteId], references: [id])

  aulaId Int  @map("aula_id")
  aula   Aula @relation(fields: [aulaId], references: [id])

  fecha DateTime
  dia   String
  hora  DateTime
  tipo  TipoMarca

  salidaId Int?         @map("salida_id")
  salida   Asistencia?  @relation("EntradaSalida", fields: [salidaId], references: [id])
  salidas  Asistencia[] @relation("EntradaSalida")

  @@map("asistencia")
}

enum TipoMarca {
  entrada
  salida
}
