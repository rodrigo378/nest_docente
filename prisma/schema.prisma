// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  password     String? // Solo si usa login propio
  googleId     String?      @unique // ID de Google
  microsoftId  String?      @unique // ID de Microsoft
  authProvider AuthProvider @default(LOCAL)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Docente    Docente?
  Permission Permission[]
}

enum AuthProvider {
  LOCAL // Login propio (email y password)
  GOOGLE // Login con Google
  MICROSOFT // Login con Microsoft
}

model Departamento {
  id         Int         @id @default(autoincrement())
  nombre     String
  provincias Provincia[]
}

model Provincia {
  id              Int          @id @default(autoincrement())
  nombre          String
  departamento    Departamento @relation(fields: [departamento_id], references: [id], onDelete: Cascade)
  departamento_id Int
  distritos       Distrito[]
}

model Distrito {
  id           Int       @id @default(autoincrement())
  nombre       String
  provincia    Provincia @relation(fields: [provincia_id], references: [id], onDelete: Cascade)
  provincia_id Int
}

model Docente {
  id                    Int      @id @default(autoincrement())
  user_id               String   @unique
  user                  User     @relation(fields: [user_id], references: [id])
  nombres               String
  apellido_paterno      String
  apellido_materno      String
  tipo_identificacion   String // DNI, RUC, Pasaporte o Carnet Extranjero
  numero_identificacion String
  fecha_nacimiento      DateTime
  email                 String   @unique
  celular               String   @db.VarChar(9)
  telefono_fijo         String   @db.VarChar(7)
  estado                Int      @default(0) // 0 = Pendiente, 1 = Aprobado

  contactoEmergencia ContactoEmergencia? // Relación 1-1 (Obligatoria)
  domicilio          Domicilio?

  formacionesAcademicas      FormacionAcademica[]
  titulosProfesionales       TituloProfesional[]
  formacionesComplementarias FormacionComplementaria[]
  experienciasDocentes       ExperienciaDocente[]
  articulosCientificos       ArticuloCientifico[]
  libros                     Libro[]
  proyectosInvestigacion     ProyectoInvestigacion[]
  asesoriasJurados           AsesoriaJurado[]
  otros                      Otros[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model ContactoEmergencia {
  id         Int     @id @default(autoincrement())
  nombre     String
  relacion   String // Padre/Madre, Hermano/a, Amigo/a, Pareja u Otro
  telefono_1 String  @db.Char(9)
  telefono_2 String? @db.Char(9)

  docente_id Int     @unique // Relación 1-1, obligatorio
  docente    Docente @relation(fields: [docente_id], references: [id], onDelete: Cascade)
}

model Domicilio {
  id              Int     @id @default(autoincrement())
  departamento_id Int
  provincia_id    Int
  distrito_id     Int
  direccion       String? // Nullable
  referencia      String? // Nullable
  mz              String? // Nullable
  lote            String? // Nullable

  docente_id Int     @unique
  docente    Docente @relation(fields: [docente_id], references: [id], onDelete: Cascade)
}

model FormacionAcademica {
  id                Int     @id @default(autoincrement())
  grado_academico   String? // Bachiller, Magister, Doctor
  universidad       String?
  especialidad      String?
  pais              String?
  resolucion_sunedu String? // Número de resolución en caso de revalidación

  docente_id Int?
  docente    Docente? @relation(fields: [docente_id], references: [id], onDelete: SetNull)
}

model TituloProfesional {
  id           Int     @id @default(autoincrement())
  titulo       String?
  universidad  String?
  especialidad String?

  docente_id Int?
  docente    Docente? @relation(fields: [docente_id], references: [id], onDelete: SetNull)
}

model FormacionComplementaria {
  id           Int     @id @default(autoincrement())
  denominacion String?
  especialidad String?
  institucion  String?

  docente_id Int?
  docente    Docente? @relation(fields: [docente_id], references: [id], onDelete: SetNull)
}

model ExperienciaDocente {
  id               Int     @id @default(autoincrement())
  institucion      String?
  curso_dictado    String?
  semestre         String?
  pais             String?
  tipo_experiencia Int // 0 = Universitario, 1 = No Universitario

  docente_id Int?
  docente    Docente? @relation(fields: [docente_id], references: [id], onDelete: SetNull)
}

model ArticuloCientifico {
  id              Int     @id @default(autoincrement())
  titulo_articulo String?
  nombre_revista  String?
  indizado        String?
  año            String?
  enlace          String?

  docente_id Int?
  docente    Docente? @relation(fields: [docente_id], references: [id], onDelete: SetNull)
}

model Libro {
  id               Int     @id @default(autoincrement())
  titulo           String?
  nombre_editorial String?
  año             String?

  docente_id Int?
  docente    Docente? @relation(fields: [docente_id], references: [id], onDelete: SetNull)
}

model ProyectoInvestigacion {
  id                   Int     @id @default(autoincrement())
  nombre               String?
  entidad_financiadora String?
  año                 String?

  docente_id Int?
  docente    Docente? @relation(fields: [docente_id], references: [id], onDelete: SetNull)
}

model AsesoriaJurado {
  id           Int     @id @default(autoincrement())
  titulo_tesis String?
  universidad  String?
  nivel        String?
  año         String?
  tipo         Int // 0 = Asesor, 1 = Jurado

  docente_id Int?
  docente    Docente? @relation(fields: [docente_id], references: [id], onDelete: SetNull)
}

model Otros {
  id              Int     @id @default(autoincrement())
  idioma          String?
  nivel_idioma    String? // Básico, Intermedio, Avanzado
  office          String?
  nivel_office    String? // Básico, Intermedio, Avanzado
  elearning       String?
  nivel_elearning String? // Básico, Intermedio, Avanzado

  docente_id Int?
  docente    Docente? @relation(fields: [docente_id], references: [id], onDelete: SetNull)
}

// se borra
model curso {
  id        Int    @id @default(autoincrement())
  n_codper  Int
  c_codmod  String
  c_codfac  String
  c_codesp  String
  c_codcur  String
  c_nomcur  String
  generales String
}

model Modulo {
  id        BigInt    @id @default(autoincrement())
  nombre    String    @db.VarChar(255)
  codigo    String    @unique @db.VarChar(255)
  icono     String?   @db.Text
  estado    String    @default("A") @db.Char(1)
  createdAt DateTime? @db.Timestamp
  updatedAt DateTime? @updatedAt @db.Timestamp
  Item      Item[]
}

model Item {
  id        BigInt    @id @default(autoincrement())
  moduloId  BigInt    @map("modulo_id")
  nombre    String    @db.VarChar(255)
  codigo    String    @unique @db.VarChar(255)
  createdAt DateTime? @db.Timestamp
  updatedAt DateTime? @updatedAt @db.Timestamp

  // Relación con el modelo Modulo
  modulo     Modulo       @relation(fields: [moduloId], references: [id])
  Permission Permission[]
}

model Permission {
  id        BigInt    @id @default(autoincrement())
  userId    String    @map("user_id")
  itemId    BigInt    @map("item_id")
  createdAt DateTime? @db.Timestamp
  updatedAt DateTime? @updatedAt @db.Timestamp

  // Relación con User
  user User @relation(fields: [userId], references: [id])

  // Relación con Item
  item Item @relation(fields: [itemId], references: [id])
}

model Horario {
  id       Int      @id @default(autoincrement())
  curso    String
  dia      String
  h_inicio DateTime
  h_fin    DateTime
  color    String
  docente  String
  ciclo    String
  seccion  String
  carrera  String
}
